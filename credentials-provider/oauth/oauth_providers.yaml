# OAuth 2.0 Provider Configurations
# This file contains OAuth provider configurations for various services
# Each provider has required fields and optional fields

providers:
  atlassian:
    display_name: "Atlassian Cloud"
    auth_url: "https://auth.atlassian.com/authorize"
    token_url: "https://auth.atlassian.com/oauth/token"
    user_info_url: "https://api.atlassian.com/oauth/token/accessible-resources"
    scopes:
      # Original minimal scopes (commented for fallback)
      # - "read:jira-work"
      # - "write:jira-work"
      # - "read:confluence-space.summary"
      # - "offline_access"
      
      # Expanded comprehensive scopes for full Atlassian access
      - "offline_access"
      - "write:confluence-content"
      - "read:confluence-space.summary"
      - "write:confluence-space"
      - "write:confluence-file"
      - "read:confluence-props"
      - "write:confluence-props"
      - "manage:confluence-configuration"
      - "read:confluence-content.all"
      - "read:confluence-content.summary"
      - "search:confluence"
      - "read:confluence-content.permission"
      - "read:confluence-user"
      - "read:confluence-groups"
      - "write:confluence-groups"
      - "readonly:content.attachment:confluence"
      - "read:jira-work"
      - "manage:jira-project"
      - "manage:jira-configuration"
      - "read:jira-user"
      - "write:jira-work"
      - "manage:jira-webhook"
      - "manage:jira-data-provider"
      - "read:servicedesk-request"
      - "manage:servicedesk-customer"
      - "write:servicedesk-request"
      - "read:servicemanagement-insight-objects"
      - "read:me"
      - "read:account"
      - "report:personal-data"
      - "write:component:compass"
      - "read:scorecard:compass"
      - "write:scorecard:compass"
      - "read:component:compass"
      - "read:event:compass"
      - "write:event:compass"
      - "read:metric:compass"
      - "write:metric:compass"
      - "read:backup:brie"
      - "write:backup:brie"
      - "read:restore:brie"
      - "write:restore:brie"
      - "read:account:brie"
      - "write:storage:brie"
    response_type: "code"
    grant_type: "authorization_code"
    audience: "api.atlassian.com"
    requires_pkce: false
    additional_params:
      prompt: "consent"
    # Provider-specific fields
    requires_cloud_id: true
    cloud_id_from_user_info: true

  google:
    display_name: "Google"
    auth_url: "https://accounts.google.com/o/oauth2/v2/auth"
    token_url: "https://oauth2.googleapis.com/token"
    user_info_url: "https://www.googleapis.com/oauth2/v2/userinfo"
    scopes:
      - "openid"
      - "email"
      - "profile"
    response_type: "code"
    grant_type: "authorization_code"
    requires_pkce: true
    additional_params:
      access_type: "offline"
      approval_prompt: "force"

  github:
    display_name: "GitHub"
    auth_url: "https://github.com/login/oauth/authorize"
    token_url: "https://github.com/login/oauth/access_token"
    user_info_url: "https://api.github.com/user"
    scopes:
      - "read:user"
      - "user:email"
    response_type: "code"
    grant_type: "authorization_code"
    requires_pkce: false
    additional_params: {}
    # Provider-specific headers
    token_headers:
      Accept: "application/json"

  cognito:
    display_name: "Amazon Cognito"
    # These URLs use templates that will be filled in at runtime
    auth_url: "https://{domain}.auth.{region}.amazoncognito.com/oauth2/authorize"
    token_url: "https://{domain}.auth.{region}.amazoncognito.com/oauth2/token"
    user_info_url: "https://{domain}.auth.{region}.amazoncognito.com/oauth2/userInfo"
    scopes:
      - "openid"
      - "email"
      - "profile"
    response_type: "code"
    grant_type: "authorization_code"
    requires_pkce: true
    additional_params: {}
    # Template variables required for this provider
    requires_template_vars:
      - domain
      - region
    template_var_defaults:
      region: "us-east-1"
      
  cognito_m2m:
    display_name: "Amazon Cognito (M2M/Client Credentials)"
    # M2M flow doesn't use authorization URL
    auth_url: ""
    token_url: "https://{domain}.auth.{region}.amazoncognito.com/oauth2/token"
    user_info_url: ""  # M2M tokens don't have user info
    scopes: []  # M2M scopes are defined per client in Cognito - leave empty to use client defaults
    response_type: ""  # Not used in M2M flow
    grant_type: "client_credentials"
    requires_pkce: false
    additional_params: {}
    # Template variables required for this provider
    requires_template_vars:
      - domain
      - region
    template_var_defaults:
      region: "us-east-1"
    # M2M specific configuration
    is_m2m: true
    supports_browser_flow: false

  microsoft:
    display_name: "Microsoft"
    auth_url: "https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize"
    token_url: "https://login.microsoftonline.com/{tenant}/oauth2/v2.0/token"
    user_info_url: "https://graph.microsoft.com/v1.0/me"
    scopes:
      - "openid"
      - "email"
      - "profile"
      - "offline_access"
    response_type: "code"
    grant_type: "authorization_code"
    requires_pkce: true
    additional_params: {}
    requires_template_vars:
      - tenant
    template_var_defaults:
      tenant: "common"

  slack:
    display_name: "Slack"
    auth_url: "https://slack.com/oauth/v2/authorize"
    token_url: "https://slack.com/api/oauth.v2.access"
    user_info_url: "https://slack.com/api/users.identity"
    scopes:
      - "identity.basic"
      - "identity.email"
    response_type: "code"
    grant_type: "authorization_code"
    requires_pkce: false
    additional_params: {}

  discord:
    display_name: "Discord"
    auth_url: "https://discord.com/oauth2/authorize"
    token_url: "https://discord.com/api/oauth2/token"
    user_info_url: "https://discord.com/api/users/@me"
    scopes:
      - "identify"
      - "email"
    response_type: "code"
    grant_type: "authorization_code"
    requires_pkce: false
    additional_params: {}

  linkedin:
    display_name: "LinkedIn"
    auth_url: "https://www.linkedin.com/oauth/v2/authorization"
    token_url: "https://www.linkedin.com/oauth/v2/accessToken"
    user_info_url: "https://api.linkedin.com/v2/me"
    scopes:
      - "r_liteprofile"
      - "r_emailaddress"
    response_type: "code"
    grant_type: "authorization_code"
    requires_pkce: false
    additional_params: {}

  spotify:
    display_name: "Spotify"
    auth_url: "https://accounts.spotify.com/authorize"
    token_url: "https://accounts.spotify.com/api/token"
    user_info_url: "https://api.spotify.com/v1/me"
    scopes:
      - "user-read-email"
      - "user-read-private"
    response_type: "code"
    grant_type: "authorization_code"
    requires_pkce: true
    additional_params: {}

  twitter:
    display_name: "Twitter/X"
    auth_url: "https://twitter.com/i/oauth2/authorize"
    token_url: "https://api.twitter.com/2/oauth2/token"
    user_info_url: "https://api.twitter.com/2/users/me"
    scopes:
      - "tweet.read"
      - "users.read"
      - "offline.access"
    response_type: "code"
    grant_type: "authorization_code"
    requires_pkce: true
    additional_params:
      code_challenge_method: "S256"

# Configuration metadata
metadata:
  version: "1.0"
  description: "OAuth 2.0 provider configurations for multiple services"
  last_updated: "2025-08-12"