{
  "server_name": "MCP Gateway Tools",
  "description": "Provides tools to interact with the MCP Gateway Registry API.",
  "path": "/mcpgw/",
  "proxy_pass_url": "http://mcpgw-server:8003/",
  "supported_transports": ["streamable-http"],
  "auth_type": "none",
  "tags": ["registry", "management"],
  "num_tools": 11,
  "num_stars": 0,
  "is_python": true,
  "license": "N/A",
  "tool_list": [
    {
      "name": "debug_auth_context",
      "parsed_description": {
        "main": "Debug tool to explore what authentication context is available.",
        "args": "None",
        "returns": "Dict[str, Any]: Detailed debug information about available auth context",
        "raises": null
      },
      "schema": {
        "properties": {},
        "type": "object"
      }
    },
    {
      "name": "get_http_headers",
      "parsed_description": {
        "main": "FastMCP 2.0 tool to access HTTP headers directly using the new dependency system.",
        "args": "None",
        "returns": "Dict[str, Any]: HTTP request information including headers",
        "raises": null
      },
      "schema": {
        "properties": {},
        "type": "object"
      }
    },
    {
      "name": "toggle_service",
      "parsed_description": {
        "main": "Toggles the enabled/disabled state of a registered MCP server in the gateway.",
        "args": "service_path: The unique path identifier for the service",
        "returns": "Dict[str, Any]: Response from the registry API indicating success or failure.",
        "raises": "Exception: If the API call fails."
      },
      "schema": {
        "properties": {
          "service_path": {
            "description": "The unique path identifier for the service (e.g., '/fininfo'). Must start with '/'.",
            "title": "Service Path",
            "type": "string"
          }
        },
        "required": ["service_path"],
        "type": "object"
      }
    },
    {
      "name": "register_service",
      "parsed_description": {
        "main": "Registers a new MCP server with the gateway.",
        "args": "server_name, path, proxy_pass_url, and optional: description, tags, num_tools, num_stars, is_python, license",
        "returns": "Dict[str, Any]: Response from the registry API, likely including the registered server details.",
        "raises": "Exception: If the API call fails."
      },
      "schema": {
        "properties": {
          "server_name": {
            "description": "Display name for the server.",
            "title": "Server Name",
            "type": "string"
          },
          "path": {
            "description": "Unique URL path prefix for the server (e.g., '/my-service'). Must start with '/'.",
            "title": "Path",
            "type": "string"
          },
          "proxy_pass_url": {
            "description": "The internal URL where the actual MCP server is running (e.g., 'http://localhost:8001').",
            "title": "Proxy Pass Url",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {"type": "string"},
              {"type": "null"}
            ],
            "default": "",
            "description": "Description of the server.",
            "title": "Description"
          },
          "tags": {
            "anyOf": [
              {
                "items": {"type": "string"},
                "type": "array"
              },
              {"type": "null"}
            ],
            "default": null,
            "description": "Optional list of tags for categorization.",
            "title": "Tags"
          },
          "num_tools": {
            "anyOf": [
              {"type": "integer"},
              {"type": "null"}
            ],
            "default": 0,
            "description": "Number of tools provided by the server.",
            "title": "Num Tools"
          },
          "num_stars": {
            "anyOf": [
              {"type": "integer"},
              {"type": "null"}
            ],
            "default": 0,
            "description": "Number of stars/rating for the server.",
            "title": "Num Stars"
          },
          "is_python": {
            "anyOf": [
              {"type": "boolean"},
              {"type": "null"}
            ],
            "default": false,
            "description": "Whether the server is implemented in Python.",
            "title": "Is Python"
          },
          "license": {
            "anyOf": [
              {"type": "string"},
              {"type": "null"}
            ],
            "default": "N/A",
            "description": "License information for the server.",
            "title": "License"
          }
        },
        "required": ["server_name", "path", "proxy_pass_url"],
        "type": "object"
      }
    },
    {
      "name": "list_services",
      "parsed_description": {
        "main": "Lists all registered MCP services in the gateway.",
        "args": "None",
        "returns": "A dictionary containing services list and total_count",
        "raises": null
      },
      "schema": {
        "properties": {},
        "type": "object"
      }
    },
    {
      "name": "remove_service",
      "parsed_description": {
        "main": "Removes a registered MCP server from the gateway.",
        "args": "service_path: The unique path identifier for the service to remove",
        "returns": "Dict[str, Any]: Response from the registry API indicating success or failure of the removal.",
        "raises": "Exception: If the API call fails or the server is not found."
      },
      "schema": {
        "properties": {
          "service_path": {
            "description": "The unique path identifier for the service to remove (e.g., '/fininfo'). Must start with '/'.",
            "title": "Service Path",
            "type": "string"
          }
        },
        "required": ["service_path"],
        "type": "object"
      }
    },
    {
      "name": "refresh_service",
      "parsed_description": {
        "main": "Triggers a refresh of the tool list for a specific registered MCP server. The registry will re-connect to the target server to get its latest tools.",
        "args": "service_path: The unique path identifier for the service",
        "returns": "Dict[str, Any]: Response from the registry API indicating the result of the refresh attempt.",
        "raises": "Exception: If the API call fails."
      },
      "schema": {
        "properties": {
          "service_path": {
            "description": "The unique path identifier for the service (e.g., '/fininfo'). Must start with '/'.",
            "title": "Service Path",
            "type": "string"
          }
        },
        "required": ["service_path"],
        "type": "object"
      }
    },
    {
      "name": "healthcheck",
      "parsed_description": {
        "main": "Retrieves health status information from all registered MCP servers via the registry's WebSocket endpoint.",
        "args": "None",
        "returns": "Dict[str, Any]: Health status information for all registered servers",
        "raises": "Exception: If the WebSocket connection fails or the data cannot be retrieved."
      },
      "schema": {
        "properties": {},
        "type": "object"
      }
    },
    {
      "name": "intelligent_tool_finder",
      "parsed_description": {
        "main": "Finds the most relevant MCP tool(s) across all registered and enabled services based on a natural language query and/or tag filtering. IMPORTANT FOR AI AGENTS: Only use the 'tags' parameter if the user explicitly provides specific tags. DO NOT infer or guess tags from the query - incorrect tags will exclude valid results. When tags are provided with a query, results must match BOTH. If unsure about tags, use natural_language_query alone for best results.",
        "args": "natural_language_query: Optional - Your query in natural language (recommended for AI agents unless user specifies tags). tags: Optional - List of tags to filter by using AND logic (CAUTION: Only use if explicitly provided by user). top_k_services: Number of top services from FAISS search (default: 3, ignored for tags-only). top_n_tools: Number of best tools to return (default: 1).",
        "returns": "List[Dict[str, Any]]: A list of dictionaries, each describing a recommended tool, its parent service, and similarity score (if semantic search used).",
        "raises": "Exception: If neither query nor tags is provided, or if FAISS index/model is unavailable."
      },
      "schema": {
        "properties": {
          "natural_language_query": {
            "anyOf": [
              {"type": "string"},
              {"type": "null"}
            ],
            "default": null,
            "description": "Your query in natural language describing the task you want to perform. Optional if tags are provided.",
            "title": "Natural Language Query"
          },
          "tags": {
            "anyOf": [
              {
                "items": {"type": "string"},
                "type": "array"
              },
              {"type": "null"}
            ],
            "default": null,
            "description": "List of tags to filter tools by using AND logic. IMPORTANT: AI agents should ONLY use this if the user explicitly provides specific tags. DO NOT infer tags - incorrect tags will exclude valid results.",
            "title": "Tags"
          },
          "top_k_services": {
            "default": 3,
            "description": "Number of top services to consider from initial FAISS search (ignored if only tags provided).",
            "title": "Top K Services",
            "type": "integer"
          },
          "top_n_tools": {
            "default": 1,
            "description": "Number of best matching tools to return.",
            "title": "Top N Tools",
            "type": "integer"
          }
        },
        "type": "object"
      }
    },
    {
      "name": "add_server_to_scopes_groups",
      "parsed_description": {
        "main": "Add a server and all its known tools/methods to specific scopes groups.",
        "args": "server_name: Name of the server (without leading slash), group_names: List of group names to add the server to",
        "returns": "Dict with success status and details about the operation",
        "raises": null
      },
      "schema": {
        "properties": {
          "server_name": {
            "description": "Name of the server to add to groups (e.g., 'example-server'). Should not include leading slash.",
            "title": "Server Name",
            "type": "string"
          },
          "group_names": {
            "description": "List of scopes group names to add the server to (e.g., ['mcp-servers-restricted/read', 'mcp-servers-restricted/execute']).",
            "items": {"type": "string"},
            "title": "Group Names",
            "type": "array"
          }
        },
        "required": ["server_name", "group_names"],
        "type": "object"
      }
    },
    {
      "name": "remove_server_from_scopes_groups",
      "parsed_description": {
        "main": "Remove a server from specific scopes groups.",
        "args": "server_name: Name of the server (without leading slash), group_names: List of group names to remove the server from",
        "returns": "Dict with success status and details about the operation",
        "raises": null
      },
      "schema": {
        "properties": {
          "server_name": {
            "description": "Name of the server to remove from groups (e.g., 'example-server'). Should not include leading slash.",
            "title": "Server Name",
            "type": "string"
          },
          "group_names": {
            "description": "List of scopes group names to remove the server from (e.g., ['mcp-servers-restricted/read', 'mcp-servers-restricted/execute']).",
            "items": {"type": "string"},
            "title": "Group Names",
            "type": "array"
          }
        },
        "required": ["server_name", "group_names"],
        "type": "object"
      }
    }
  ]
}