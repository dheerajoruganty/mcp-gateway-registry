version: '3.8'

services:
  # Registry service (includes nginx, SSL, FAISS, models)
  registry:
    build:
      context: .
      dockerfile: docker/Dockerfile.registry
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - AUTH_SERVER_URL=${AUTH_SERVER_URL}
      - AUTH_SERVER_EXTERNAL_URL=${AUTH_SERVER_EXTERNAL_URL}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - SRE_GATEWAY_AUTH_TOKEN=${SRE_GATEWAY_AUTH_TOKEN}
      - ATLASSIAN_AUTH_TOKEN=${ATLASSIAN_AUTH_TOKEN}
      - METRICS_SERVICE_URL=http://metrics-service:8890
      - METRICS_API_KEY=${METRICS_API_KEY_REGISTRY}
      - METRICS_API_KEY_NGINX=${METRICS_API_KEY_REGISTRY}
    ports:
      - "80:80"
      - "443:443"
      - "7860:7860"
    volumes:
      - /opt/mcp-gateway/servers:/app/registry/servers
      - /opt/mcp-gateway/models:/app/registry/models
      - /opt/ssl:/etc/ssl
      - /var/log/mcp-gateway:/app/logs
      - /opt/mcp-gateway/auth_server/scopes.yml:/app/auth_server/scopes.yml
    depends_on:
      - auth-server
      - metrics-service
    restart: unless-stopped

  # Metrics Collection Service
  metrics-service:
    build:
      context: .
      dockerfile: metrics-service/Dockerfile
    environment:
      - METRICS_SERVICE_PORT=8890
      - METRICS_SERVICE_HOST=0.0.0.0
      - SQLITE_DB_PATH=/var/lib/sqlite/metrics.db
      - METRICS_RETENTION_DAYS=90
      - METRICS_API_KEY_AUTH=${METRICS_API_KEY_AUTH_SERVER}
      - METRICS_API_KEY_REGISTRY=${METRICS_API_KEY_REGISTRY}
      - METRICS_API_KEY_MCPGW=${METRICS_API_KEY_MCPGW_SERVER}
      - OTEL_SERVICE_NAME=mcp-metrics-service
      - OTEL_PROMETHEUS_ENABLED=true
      - OTEL_PROMETHEUS_PORT=9465
      - METRICS_RATE_LIMIT=1000
    ports:
      - "8890:8890"
      - "9465:9465"  # Prometheus metrics endpoint
    volumes:
      - metrics-db-data:/var/lib/sqlite
      - /var/log/mcp-gateway:/app/logs
    depends_on:
      - metrics-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8890/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth service (separate and scalable)
  auth-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.auth
    environment:
      - REGISTRY_URL=${REGISTRY_URL}
      - SECRET_KEY=${SECRET_KEY}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - METRICS_SERVICE_URL=http://metrics-service:8890
      - METRICS_API_KEY=${METRICS_API_KEY_AUTH_SERVER}
    ports:
      - "8888:8888"
    volumes:
      - /var/log/mcp-gateway:/app/logs
      - /opt/mcp-gateway/auth_server/scopes.yml:/app/scopes.yml
    restart: unless-stopped

  # Current Time MCP Server
  currenttime-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        SERVER_PATH: servers/currenttime
    environment:
      - PORT=8000
      - MCP_TRANSPORT=streamable-http
    ports:
      - "8000:8000"
    restart: unless-stopped

  # Financial Info MCP Server
  fininfo-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        SERVER_PATH: servers/fininfo
    environment:
      - PORT=8001
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - /opt/mcp-gateway/secrets/fininfo/:/app/fininfo/
    ports:
      - "8001:8001"
    restart: unless-stopped

  # MCP Gateway Server
  mcpgw-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        SERVER_PATH: servers/mcpgw
    environment:
      - PORT=8003
      - REGISTRY_BASE_URL=http://registry:7860
      - REGISTRY_USERNAME=${ADMIN_USER:-admin}
      - REGISTRY_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - /opt/mcp-gateway/servers:/app/registry/servers
      - /opt/mcp-gateway/models:/app/registry/models
      - /opt/mcp-gateway/auth_server/scopes.yml:/app/auth_server/scopes.yml
    ports:
      - "8003:8003"
    depends_on:
      - registry
    restart: unless-stopped

  # Real Server Fake Tools MCP Server
  realserverfaketools-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
      args:
        SERVER_PATH: servers/realserverfaketools
    environment:
      - PORT=8002
    ports:
      - "8002:8002"
    restart: unless-stopped

  # Atlassian MCP Server
  atlassian-server:
    image: ghcr.io/sooperset/mcp-atlassian:latest
    environment:
      - ATLASSIAN_OAUTH_ENABLE=true
      - MCP_VERY_VERBOSE=true
      - MCP_LOGGING_STDOUT=true
    ports:
      - "8005:8005"
    volumes:
      - $HOME/.mcp-atlassian:/home/app/.mcp-atlassian
    command: --transport streamable-http --port 8005
    restart: unless-stopped

  # SQLite container for metrics database
  metrics-db:
    image: alpine:latest
    volumes:
      - metrics-db-data:/var/lib/sqlite
    command: ["sh", "-c", "apk add --no-cache sqlite && mkdir -p /var/lib/sqlite && sqlite3 /var/lib/sqlite/metrics.db 'CREATE TABLE IF NOT EXISTS _health (id INTEGER);' && tail -f /dev/null"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sqlite3", "/var/lib/sqlite/metrics.db", ".tables"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  ssl_data:
  metrics-db-data:
  prometheus-data:
  grafana-data: